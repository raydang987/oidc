import { jwtDecode } from "jwt-decode";
import { Injectable, HttpException, HttpStatus } from "@nestjs/common";
import axios from "axios";

@Injectable()
export class AuthService {
  private readonly OIDC_TOKEN_URL = "https://id2.tris.vn/connect/token";
  private readonly OIDC_USERINFO_URL = "https://id2.tris.vn/connect/userinfo";

  async verifyToken(access_token: string) {
    console.log("token: ", access_token);
    if (!access_token) {
      console.error("‚ùå Kh√¥ng c√≥ token ƒë∆∞·ª£c g·ª≠i l√™n!");
      throw new HttpException("Token kh√¥ng h·ª£p l·ªá", HttpStatus.UNAUTHORIZED);
    }

    // ‚úÖ Gi·∫£i m√£ token m√† kh√¥ng c·∫ßn verify
    try {
      const decoded = jwtDecode(access_token);
      console.log("üîë Token decoded:", decoded);
    } catch (error) {
      console.error("‚ùå Token kh√¥ng h·ª£p l·ªá khi decode:", error);
      throw new HttpException("Token kh√¥ng h·ª£p l·ªá", HttpStatus.UNAUTHORIZED);
    }

    // ‚úÖ G·ª≠i token l√™n OIDC server ƒë·ªÉ ki·ªÉm tra t√≠nh h·ª£p l·ªá
    try {
      const response = await axios.get(this.OIDC_USERINFO_URL, {
        headers: { Authorization: `Bearer ${access_token}` },
      });

      console.log("‚úÖ Token h·ª£p l·ªá! Th√¥ng tin user:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n:",
        error.response?.data || error
      );

      throw new HttpException(
        "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        HttpStatus.UNAUTHORIZED
      );
    }
  }
}
